参考URL：
https://cloud.google.com/functions/docs/securing/authenticating?hl=ja
https://cloud.google.com/functions/docs/securing/managing-access-iam?hl=ja
https://firebase.google.com/docs/web/setup?hl=ja


前提：
functionsの呼び出し可否を、ログインユーザーによってわけたい場合
呼び出し元が、Hosting、Webアプリ、スマホアプリ、Unityのいずれでもない。（Firebase SDKが提供されていない）


方法論：
下記のいずれかによるログイン制限が可能
Google ログイン
Firebase Authentication
APIキー


■ Googleログインを使用する場合

参考ページ
https://officeforest.org/wp/2020/03/05/vba%E3%81%8B%E3%82%89kintone%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92oauth2-0%E8%AA%8D%E8%A8%BC%E3%81%A7%E8%AA%AD%E3%81%BF%E6%9B%B8%E3%81%8D%E3%81%99%E3%82%8B-%E6%BA%96%E5%82%99%E7%B7%A8/
https://news.mynavi.jp/article/20110916-excelweb/
http://blog.miminoinu.net/archives/117/
http://blog.miminoinu.net/archives/130/
http://blog.livedoor.jp/excelmadam/archives/4629081.html

VBAとIE11を組み合わせ、oAuth2を使用することで、
認証はとおりそうである。

ただし、今回のシステムが

・Excelを恒久的に使う予定のないこと
・アクセス元がひとつのみであること
・別途Googleアカウントを用意する必要があること

などを加味すると、この実装が適切か悩ましい。



■ Firebase Authentication
を使用する場合

注:
前述の Google ログインと異なり、関数で認証が行われます。
関数でトークンの検証が必要になるため、未承認のリクエストも課金対象になります。
↓
つまりfunction内で権限の認証を行うため、
不正アタックされた場合は、その通信も
課金対象のトラフィックに含まれてしまう

公式ドキュメントを見るが、クライアント側で
SDKを使用する以外の方法が記載されていない。


■ APIキーを使用する場合

Excelのパスワード、
APIキー
APIキーでのアクセス可能な関数の制限
IPアドレス

で管理を行うことになる。


https://cloud.google.com/docs/authentication/api-keys?hl=ja&visit_id=637288303461725334-57050982&rd=1



■そのほかの方法

C#でCOMコンポーネントを作成し、
そこ経由でFireBaseにアクセスする。

https://qiita.com/tomochan154/items/1ce33f2aef167c0fed9d
https://www.atmarkit.co.jp/fdotnet/dotnettips/1064combycs/combycs.html
https://teratail.com/questions/184922

